if(ciType=="Standard Wald"){
set_r=floor(nrow(testData)/set_m)
}else if(ciType=="Modified Wald"){
set_r=floor(normSamp/set_m)
}else if(ciType=="LR"){
set_r=floor(normSamp/set_m)
}else if(ciType=="MLR"){
set_r=floor(normSamp/set_m)
}
newRSSComponent<-RSSComponents$new()
newRSSComponent$initialize(maxResamples=resamplesMax, set_mInput=set_m, set_rInput=set_r,regressionType=regression, excludeNAInput=TRUE)
newHMRSSInstance<-HMAnalysis$new(hitMissDF=testData, CIType=ciType, modelType=regression, N=nrow(testData),
normSampleAmount=normSamp, rankedSetSampleObject=newRSSComponent)
newHMRSSInstance$initializeRSS()
resultDF<-newHMRSSInstance$getResults()
aValResults<-newHMRSSInstance$getKeyAValues()
end.time <- Sys.time()
time.taken <- end.time - start.time
print("total execution time was:")
print(time.taken)
resultDF<-na.omit(resultDF)
newHMRSSInstance$plotSimdata(resultDF)
newHMRSSInstance$plotCI(resultDF)
.rs.restartR()
library(ggplot2)
library(reticulate)
library(MASS)
library(mcprofile)
library(parallel)
# #Test Code
#flag used for genNormFitClassR
isLog=FALSE
#Sys.which("python")
use_python('C:/ProgramData/Anaconda3')
filepath=dirname(rstudioapi::getSourceEditorContext()$path)
source_python(paste(filepath,"/../PythonRankedSetSampling/RSSRowSorter.py", sep=""))
source_python(paste(filepath,"/../PythonRankedSetSampling/CyclesArrayGenerator.py", sep=""))
source_python(paste(filepath,"/../PythonRankedSetSampling/MainRSSamplingClass.py", sep=""))
source_python(paste(filepath,"/../PythonRankedSetSampling/RSS2DArrayGenerator.py", sep=""))
#rscripts
source(paste(filepath,"/RankedSetSamplingMainRObject.R", sep = ""))
source(paste(filepath,"/RSSComponentsObject.R", sep = ""))
source(paste(filepath,"/RankedSetRegGen.R", sep = ""))
source(paste(filepath,"/HMLogitApproximationRObject.R", sep = ""))
source(paste(filepath,"/HMFirthApproximationRObject.R", sep = ""))
source(paste(filepath,"/GenPODCurveRSS.R", sep = ""))
source(paste(filepath,"/GenRSS_A_Values.R", sep = ""))
source(paste(filepath,"/WaldCI_RObject.R", sep = ""))
source(paste(filepath,"/HitMissMainAnalysisRObject.R", sep = ""))
source(paste(filepath,"/GenNormFitClassR.R", sep = ""))
source(paste(filepath,"/GenAValuesOnPODCurveRObject.R", sep = ""))
source(paste(filepath,"/LRConfIntRObject.R", sep = ""))
source(paste(filepath,"/MLRConfIntRObject.R", sep = ""))
#testData<-read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/CSharpBackendTempSolution/CSharpBackendTempSolutionForPOD4Point5/RCode/RBackend/HitMissData_Good.csv")
#testData<-read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/CSharpBackendTempSolution/CSharpBackendTempSolutionForPOD4Point5/RCode/RBackend/HitMissData_Bad.csv")
#testData<-read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/CSharpBackendTempSolution/CSharpBackendTempSolutionForPOD4Point5/RCode/RBackend/HitMissInfo_BadLL.csv")
#testData<-read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/CSharpBackendTempSolution/CSharpBackendTempSolutionForPOD4Point5/RCode/RBackend/newHitMissRSSTest.csv")
testData <- read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/PODv4Point5Attemp1/PODv4/POD Source Code/RCode/RBackend/HitMiss/HitMissData_Bad_2.csv")
options(warn=-1)
#set the number of resamples here(usually 30 is sufficient)
#used for modified wald
regression="Firth Logistic Regression"
#regression="Logistic Regression"
normSamp=500
resamplesMax=30
#conf int type
ciType="MLR"
start.time <- Sys.time()
set_m=6
if(ciType=="Standard Wald"){
set_r=floor(nrow(testData)/set_m)
}else if(ciType=="Modified Wald"){
set_r=floor(normSamp/set_m)
}else if(ciType=="LR"){
set_r=floor(normSamp/set_m)
}else if(ciType=="MLR"){
set_r=floor(normSamp/set_m)
}
newRSSComponent<-RSSComponents$new()
newRSSComponent$initialize(maxResamples=resamplesMax, set_mInput=set_m, set_rInput=set_r,regressionType=regression, excludeNAInput=TRUE)
newHMRSSInstance<-HMAnalysis$new(hitMissDF=testData, CIType=ciType, modelType=regression, N=nrow(testData),
normSampleAmount=normSamp, rankedSetSampleObject=newRSSComponent)
newHMRSSInstance$initializeRSS()
resultDF<-newHMRSSInstance$getResults()
aValResults<-newHMRSSInstance$getKeyAValues()
end.time <- Sys.time()
time.taken <- end.time - start.time
print("total execution time was:")
print(time.taken)
resultDF<-na.omit(resultDF)
newHMRSSInstance$plotSimdata(resultDF)
newHMRSSInstance$plotCI(resultDF)
View(resultDF)
View(resultDF)
# Import needed packages
library("RSSampling")
library(MASS)
library(pracma)
library(mcprofile)
library(glmnet)
library(logistf)
# Set folder where functions are stored
codeLocation="C:/Users/gohmancm/Desktop/Experiments/R_Source_Code_dummy_2/"
# Load the functions into R's memory
source(paste(codeLocation,"getFirthResults.R",sep=""))
source(paste(codeLocation,"getLassoResults.R",sep=""))
source(paste(codeLocation,"getLogitResults.R",sep=""))
source(paste(codeLocation,"getRSSindices.R",sep=""))
source(paste(codeLocation,"getRSSmedians.R",sep=""))
source(paste(codeLocation,"lasso_se.R",sep=""))
source(paste(codeLocation,"RSS.fn.R",sep=""))
source(paste(codeLocation,"setupData.R",sep=""))
# Set folder where data exists
inputLocation="C:/Users/gohmancm/Desktop/Experiments/R_Source_Code_dummy_2/"
inputName = "simulation_60_0.28_2"
data<-read.csv(paste(inputLocation, inputName,".csv",sep=""),
col.names=c("Order","y","x","SimNum","insp","n","case","uneven",
"uneven_lower","overlap","missDist","hitDist"),
header=FALSE)
# Choose a simulation number from the 3000 simulations.
data = subset(data, SimNum==1)
# Set folder where output files write
folderLocation = "C:/Users/gohmancm/Desktop/Experiments/R_Source_Code_dummy_2/"
fileName=paste(folderLocation, inputName,"_results",".csv",sep="")
View(testData)
View(testData)
df=read.csv("C:/Users/gohmancm/Desktop/Experiments/R_Source_Code_dummy_2/simulation_60_0.28_2Copy.csv")
start.time <- Sys.time()
m = 6
r=floor(df$N[1]/m)
rssamp=con.Mrss(df$x, df$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
df=read.csv("C:/Users/gohmancm/Desktop/Experiments/R_Source_Code_dummy_2/simulation_60_0.28_2Copy.csv", headers=FALSE)
df=read.csv(headers=FALSE,"C:/Users/gohmancm/Desktop/Experiments/R_Source_Code_dummy_2/simulation_60_0.28_2Copy.csv")
df=read.csv("C:/Users/gohmancm/Desktop/Experiments/R_Source_Code_dummy_2/simulation_60_0.28_2Copy.csv", header=FALSE)
names(df)[names(df) == 'v1'] <- 'Index'
names(df)[names(df) == 'v2'] <- 'x'
names(df)[names(df) == 'Index'] <- 'index'
View(df)
View(df)
start.time <- Sys.time()
m = 6
r=floor(df$N[1]/m)
rssamp=con.Mrss(df$x, df$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
print("total execution time was:")
print(time.taken)
View(df)
View(df)
names(df)[names(df) == 'V1'] <- 'index'
View(df)
View(df)
names(df)[names(df) == 'V2'] <- 'x'
View(df)
View(df)
start.time <- Sys.time()
m = 6
r=floor(df$N[1]/m)
rssamp=con.Mrss(df$x, df$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
print("total execution time was:")
print(time.taken)
df[1:120,]
df2<-df[1:120,]
View(df2)
View(df2)
# RSS: Doing the bootstrap here ######
start.time <- Sys.time()
m = 6
r=floor(df$N[1]/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
print("total execution time was:")
print(time.taken)
start.time <- Sys.time()
m = 6
r=floor(df$N[1]/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
r=floor(df2$N[1]/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
start.time <- Sys.time()
m = 6
r=floor(df2$N[1]/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
print("total execution time was:")
print(time.taken)
nrow(df2)
r=floor(nrow(df2)/m)
start.time <- Sys.time()
m = 6
r=floor(nrow(df2)/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
print("total execution time was:")
print(time.taken)
df=read.csv("C:/Users/gohmancm/Desktop/Experiments/R_Source_Code_dummy_2/simulation_60_0.28_2Copy.csv", header=FALSE)
df=read.csv("C:/Users/gohmancm/Desktop/Experiments/R_Source_Code_dummy_2/simulation_60_0.28_2Copy.csv", header=FALSE)
names(df)[names(df) == 'V2'] <- 'x'
names(df)[names(df) == 'V1'] <- 'index'
View(df)
View(df)
View(df)
View(df)
View(df)
View(df)
names(df)[names(df) == 'x'] <- 'y'
names(df)[names(df) == 'V3'] <- 'x'
df2<-df[1:120,]
View(df2)
View(df2)
# RSS: Doing the bootstrap here ######
timesCount=list()
for(i in 1:100){
start.time <- Sys.time()
m = 6
r=floor(nrow(df2)/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
print("total execution time was:")
print(time.taken)
timesCount=append(timesCount, time.taken)
}
avgTime=average(as.numeric(timesCount))
df=read.csv("C:/Users/gohmancm/Desktop/Experiments/R_Source_Code_dummy_2/simulation_60_0.28_2Copy.csv", header=FALSE)
names(df)[names(df) == 'V1'] <- 'index'
names(df)[names(df) == 'V3'] <- 'x'
df2<-df[1:120,]
timesCount=list()
for(i in 1:100){
start.time <- Sys.time()
m = 6
r=floor(nrow(df2)/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
#print("total execution time was:")
print(time.taken)
timesCount=append(timesCount, time.taken)
}
avgTime=average(as.numeric(timesCount))
# RSS: Doing the bootstrap here ######
timesCount=list()
for(i in 1:100){
start.time <- Sys.time()
m = 6
r=floor(nrow(df2)/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
#print("total execution time was:")
#print(time.taken)
timesCount=append(timesCount, time.taken)
}
avgTime=mean(as.numeric(timesCount))
time.taken <- end.time - start.time
start.time <- Sys.time()
m = 6
r=floor(nrow(df2)/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
#print("total execution time was:")
#print(time.taken)
timesCount=append(timesCount, time.taken)
as.numeric(time.taken)
start.time <- Sys.time()
m = 6
r=floor(nrow(df2)/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
#print("total execution time was:")
#print(time.taken)
timesCount=append(timesCount, as.numeric(time.taken))
View(timesCount)
View(timesCount)
avgTime=mean(as.numeric(timesCount))
# RSS: Doing the bootstrap here ######
timesCount=list()
for(i in 1:100){
start.time <- Sys.time()
m = 6
r=floor(nrow(df2)/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
#print("total execution time was:")
#print(time.taken)
timesCount=append(timesCount, as.numeric(time.taken))
}
avgTime=mean(as.numeric(timesCount))
View(rssamp)
View(rssamp)
start.time <- Sys.time()
m = 6
r=floor(nrow(df2)/m)
rssamp=con.Mrss(df2$x, df2$index, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
#print("total execution time was:")
#print(time.taken)
timesCount=append(timesCount, as.numeric(time.taken))
View(timesCount)
rssamp=con.Mrss(df2$x, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
rssampNew=Mrss(df2$x, m=m, r=r, type="r", concomitant=TRUE, sets=TRUE)
rssampNew=Mrss(df2$x, m=m, r=r, type="r", sets=TRUE)
View(rssampNew)
View(rssampNew)
# RSS: Doing the bootstrap here ######
timesCount=list()
for(i in 1:100){
start.time <- Sys.time()
m = 6
r=floor(nrow(df2)/m)
rssampNew=Mrss(df2$x, m=m, r=r, type="r", sets=TRUE)
end.time <- Sys.time()
time.taken <- end.time - start.time
#print("total execution time was:")
#print(time.taken)
timesCount=append(timesCount, as.numeric(time.taken))
}
avgTime=mean(as.numeric(timesCount))
View(rssampNew)
View(rssampNew)
View(df2)
View(df2)
for(i in sets){}
for(i in rssampNew$sets){print(i)}
resultsDF=data.frame(x=c(),y=())
resultsDF=data.frame(x=c(),y=c())
View(resultsDF)
View(resultsDF)
View(df2)
View(df2)
df2$x
m = 6
r=floor(nrow(df2)/m)
rssampNew=Mrss(df2$x, m=m, r=r, type="r", sets=TRUE)
resultsDF=data.frame()
colnames(resultsDF)<-c("index","x", "y")
colnames(resultsDF)<-list("index","x", "y")
m = 6
r=floor(nrow(df2)/m)
rssampNew=Mrss(df2$x, m=m, r=r, type="r", sets=TRUE)
resultsDF=data.frame(matrix(ncol = 3, nrow = 0))
colnames(resultsDF)<-c("index","x", "y")
View(resultsDF)
View(resultsDF)
for(i in rssampNew$sets){
currRow<- df2[df2$x == i,]
resultsDF=rbind(resultsDF, currRow)
}
View(resultsDF)
View(resultsDF)
m = 6
r=floor(nrow(df2)/m)
rssampNew=Mrss(df2$x, m=m, r=r, type="r", sets=TRUE)
resultsDF=data.frame(matrix(ncol = 3, nrow = 0))
colnames(resultsDF)<-c("index","x", "y")
for(i in rssampNew$sets){
currRow<- df2[df2$x == i,]
rbind(resultsDF, currRow)
}
start.time <- Sys.time()
m = 6
r=floor(nrow(df2)/m)
rssampNew=Mrss(df2$x, m=m, r=r, type="r", sets=TRUE)
rssampNew$sets
View(rssampNew)
View(rssampNew)
rssampNew$samples
# #Test Code
#flag used for genNormFitClassR
isLog=FALSE
#import necessary libraries
library(methods)
#dependencies from original R code
library(MASS)
library(ggplot2)
library(mcprofile) ## MLR and LR
library(logistf)
library(splines)
library(parallel)
#hitMissDF <- read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/PODv4Point5Attemp1/PODv4/POD Source Code/RCode/RBackend/HitMiss/HitMissData_Bad_2.csv")
#hitMissDF<-read.csv("C:/Users/gohmancm/Desktop/RSS/HitMissData_Good.csv")
hitMissDF<-read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/CSharpBackendTempSolution/RCode/RBackend/HitMissInfo_BadLL.csv")
#hitMissDF <- read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/RCode/RBackend/HitMissData_Good_1TestSet.csv")
#get the working directory, used for debugging only
codeLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(codeLocation,"/RSSComponentsObject.R",sep=""))
source(paste(codeLocation,"/RankedSetSamplingMainRObject.R",sep=""))
source(paste(codeLocation,"/HitMissMainAnalysisRObject.R",sep=""))
source(paste(codeLocation,"/WaldCI_RObject.R",sep=""))
source(paste(codeLocation,"/HMLogitApproximationRObject.R",sep=""))
source(paste(codeLocation,"/genNormFitClassR.R",sep=""))
source(paste(codeLocation,"/LinearComboGeneratorClassR.R",sep=""))
source(paste(codeLocation,"/LRConfIntRObject.R",sep=""))
source(paste(codeLocation,"/MLRConfIntRObject.R",sep=""))
source(paste(codeLocation,"/GenAValuesOnPODCurveRObject.R",sep=""))
source(paste(codeLocation,"/HMFirthApproximationRObject.R",sep=""))
source(paste(codeLocation,"/miniMcprofile.R",sep=""))
CItype0="Standard Wald"
#type="Firth Logistic Regression"
type="Logistic Regression"
#for(i in 1:10){
newAnalysis<-HMAnalysis$new(hitMissDF=hitMissDF, modelType=type, CIType=CItype0, N=nrow(hitMissDF), normSampleAmount=500)
newAnalysis$detAnalysisApproach()
results<-newAnalysis$getResults()
aValues<-newAnalysis$getKeyAValues()
covarianceMatrix<-newAnalysis$getCovMatrix()
newAnalysis$plotSimdata(results)
newAnalysis$plotCI(results)
#}
# #Test Code
#flag used for genNormFitClassR
isLog=FALSE
#import necessary libraries
library(methods)
#dependencies from original R code
library(MASS)
library(ggplot2)
library(mcprofile) ## MLR and LR
library(logistf)
library(splines)
library(parallel)
#hitMissDF <- read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/PODv4Point5Attemp1/PODv4/POD Source Code/RCode/RBackend/HitMiss/HitMissData_Bad_2.csv")
#hitMissDF<-read.csv("C:/Users/gohmancm/Desktop/RSS/HitMissData_Good.csv")
hitMissDF<-read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/CSharpBackendTempSolution/RCode/RBackend/HitMissInfo_BadLL.csv")
#hitMissDF <- read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/RCode/RBackend/HitMissData_Good_1TestSet.csv")
#get the working directory, used for debugging only
codeLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(codeLocation,"/RSSComponentsObject.R",sep=""))
source(paste(codeLocation,"/RankedSetSamplingMainRObject.R",sep=""))
source(paste(codeLocation,"/HitMissMainAnalysisRObject.R",sep=""))
source(paste(codeLocation,"/WaldCI_RObject.R",sep=""))
source(paste(codeLocation,"/HMLogitApproximationRObject.R",sep=""))
source(paste(codeLocation,"/genNormFitClassR.R",sep=""))
source(paste(codeLocation,"/LinearComboGeneratorClassR.R",sep=""))
source(paste(codeLocation,"/LRConfIntRObject.R",sep=""))
source(paste(codeLocation,"/MLRConfIntRObject.R",sep=""))
source(paste(codeLocation,"/GenAValuesOnPODCurveRObject.R",sep=""))
source(paste(codeLocation,"/HMFirthApproximationRObject.R",sep=""))
source(paste(codeLocation,"/miniMcprofile.R",sep=""))
CItype0="Standard Wald"
#type="Firth Logistic Regression"
type="Logistic Regression"
#for(i in 1:10){
newAnalysis<-HMAnalysis$new(hitMissDF=hitMissDF, modelType=type, CIType=CItype0, N=nrow(hitMissDF), normSampleAmount=500)
newAnalysis$detAnalysisApproach()
results<-newAnalysis$getResults()
aValues<-newAnalysis$getKeyAValues()
covarianceMatrix<-newAnalysis$getCovMatrix()
newAnalysis$plotSimdata(results)
newAnalysis$plotCI(results)
#}
.rs.restartR()
# #Test Code
#flag used for genNormFitClassR
isLog=FALSE
#import necessary libraries
library(methods)
#dependencies from original R code
library(MASS)
library(ggplot2)
library(mcprofile) ## MLR and LR
library(logistf)
library(splines)
library(parallel)
#hitMissDF <- read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/PODv4Point5Attemp1/PODv4/POD Source Code/RCode/RBackend/HitMiss/HitMissData_Bad_2.csv")
#hitMissDF<-read.csv("C:/Users/gohmancm/Desktop/RSS/HitMissData_Good.csv")
hitMissDF<-read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/CSharpBackendTempSolution/RCode/RBackend/HitMissInfo_BadLL.csv")
#hitMissDF <- read.csv("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/RCode/RBackend/HitMissData_Good_1TestSet.csv")
#get the working directory, used for debugging only
codeLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(codeLocation,"/RSSComponentsObject.R",sep=""))
source(paste(codeLocation,"/RankedSetSamplingMainRObject.R",sep=""))
source(paste(codeLocation,"/HitMissMainAnalysisRObject.R",sep=""))
source(paste(codeLocation,"/WaldCI_RObject.R",sep=""))
source(paste(codeLocation,"/HMLogitApproximationRObject.R",sep=""))
source(paste(codeLocation,"/genNormFitClassR.R",sep=""))
source(paste(codeLocation,"/LinearComboGeneratorClassR.R",sep=""))
source(paste(codeLocation,"/LRConfIntRObject.R",sep=""))
source(paste(codeLocation,"/MLRConfIntRObject.R",sep=""))
source(paste(codeLocation,"/GenAValuesOnPODCurveRObject.R",sep=""))
source(paste(codeLocation,"/HMFirthApproximationRObject.R",sep=""))
source(paste(codeLocation,"/miniMcprofile.R",sep=""))
CItype0="Standard Wald"
#type="Firth Logistic Regression"
type="Logistic Regression"
#for(i in 1:10){
newAnalysis<-HMAnalysis$new(hitMissDF=hitMissDF, modelType=type, CIType=CItype0, N=nrow(hitMissDF), normSampleAmount=500)
newAnalysis$detAnalysisApproach()
results<-newAnalysis$getResults()
aValues<-newAnalysis$getKeyAValues()
covarianceMatrix<-newAnalysis$getCovMatrix()
newAnalysis$plotSimdata(results)
newAnalysis$plotCI(results)
#}
