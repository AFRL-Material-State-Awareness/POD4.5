# Fitting a linear model
linearModel_lm = lm(y ~ x, data = data, na.action=na.omit)
return(linearModel_lm)
}
lmModel=executeLinearFit()
View(data)
View(data)
# Fitting a linear model
linearModel_lm = lm(y ~ x, data = data, na.action=na.omit)
# Fitting a linear model
linearModel_lm = lm(y ~ x, data = data, na.action=na.omit)
#genFlawSizes=function(data){
# Find distribution of flaw sizes
x_dist = fitdistr(data$x,"normal")
# Simulate 50 flaws from x's distribution
new_data = data.frame(
intercept = rep(1,50),
x = runif(n=50, min = min(data$x), max = max(data$x))+0.1)
View(new_data)
View(new_data)
#  x = rnorm(n=50, mean = x_dist[[1]][[1]], sd=x_dist[[1]][[2]])+0.1) # added 0.1 offset to keep values positive
# Predict y values using the model
new_data$y_new = predict(linearModel_lm, newdata=new_data)
# Add random noise to the data
new_data$y = new_data$y_new + rnorm(n=50, mean=0, sd = 1)
summary(new_data)
View(new_data)
View(new_data)
ggplot(new_data)+theme_bw()+
geom_point(aes(x,y))+ylab("Response")+xlab("Defect Size (a)")
data_obs = new_data[c("x","y")]
# Histogram should look normally distributed. It does not, but that's probably because there's so little data.
ggplot(data)+theme_bw()+
geom_histogram(aes(x=y))+xlab("Response")
# Plot x vs y
ggplot(data_obs, aes(x=x, y=y))+geom_point()+
ylab("Response")+xlab("Defect Size (a)")+theme_bw()+ylim(2,14)+xlim(0.11,0.31)
# Plot without the confidence interval
ggplot(data_obs, aes(x=x, y=y))+geom_point()+geom_smooth(method='glm', formula=y ~ x, se=FALSE)+
ylab("Response")+xlab("Defect Size (a)")+theme_bw()+ylim(2,14)+xlim(0.11,0.31)
# Plot with confidence interval
ggplot(data_obs, aes(x=x, y=y))+geom_point()+geom_smooth(method='glm', formula=y ~ x)+
ylab("Response")+xlab("Defect Size (a)")+theme_bw()+ylim(2,14)+xlim(0.11,0.31)
# Fitting a linear model
linearModel_lm = lm(y ~ x, data = data_obs, na.action=na.omit)
# Lots of plots to check assumptions
plot(linearModel_lm)
# Note, we are using the Box Cox transformed y and f_a (log) transformed x
censored.a.hat <- Surv(time = data_obs$y.trans, time2 = data_obs$y.trans, type = "interval2")
a.hat.censor.df <- data.frame(censored.a.hat, x = f_a(data_obs$x))
# It expects a censored object; this data is not censored but we can still use it.
# Note, we are using the Box Cox transformed y and f_a (log) transformed x
censored.a.hat <- Surv(time = data_obs$y.trans, time2 = data_obs$y.trans, type = "interval2")
install.packages(car)
install.packages("car")
library(devtools)
install_version("pbkrtest", version = "0.4-8.6", repos = "http://cran.us.r-project.org")
install_version("pbkrtest", version = "0.4-5", repos = "http://cran.us.r-project.org")
install_version("pbkrtest", version = "0.4-5", repos = "http://cran.us.r-project.org")
.rs.restartR()
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE, col.names=c("y","x"))
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-SRMainAnalysisObject$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
newSRAnalysis$plotPOD(results,critPoints)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE, col.names=c("y","x"))
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-SRMainAnalysisObject$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
newSRAnalysis$plotPOD(results,critPoints)
View(critPoints)
View(critPoints)
View(results)
View(results)
View(testResults)
View(testResults)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE, col.names=c("y","x"))
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-SRMainAnalysisObject$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
newSRAnalysis$plotPOD(results,critPoints)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE, col.names=c("y","x"))
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-AHatAnalysis$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
keyAValues<-newSRAnalysis$getKeyAValues()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
newSRAnalysis$plotPOD(results,critPoints)
View(keyAValues)
View(keyAValues)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
#library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE)
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-AHatAnalysis$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
linResults<-newSRAnalysis$getLinearModel()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
keyAValues<-newSRAnalysis$getKeyAValues()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
newSRAnalysis$plotPOD(results,critPoints)
newSRAnalysis$plotSimdata(linResults)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
#library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE)
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-AHatAnalysis$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
linResults<-newSRAnalysis$getLinearModel()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
keyAValues<-newSRAnalysis$getKeyAValues()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
newSRAnalysis$plotPOD(results,critPoints)
newSRAnalysis$plotSimdata(linResults)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
#library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE)
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-AHatAnalysis$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
linResults<-newSRAnalysis$getLinearModel()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
keyAValues<-newSRAnalysis$getKeyAValues()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
newSRAnalysis$plotPOD(results,critPoints)
newSRAnalysis$plotSimdata(linResults)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
#library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE)
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-AHatAnalysis$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
linResults<-newSRAnalysis$getLinearModel()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
keyAValues<-newSRAnalysis$getKeyAValues()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
newSRAnalysis$plotPOD(results,critPoints)
newSRAnalysis$plotSimdata(linResults)
View(linearModel_lm)
View(linearModel_lm)
linearModel_lm$coefficients[1]
linearModel_lm$coefficients[[1]]
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
#library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE)
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-AHatAnalysis$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
linResults<-newSRAnalysis$getLinearModel()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
keyAValues<-newSRAnalysis$getKeyAValues()
slope<-newSRAnalysis$getModelSlope()
intercept<-newSRAnalysis$getModelIntercept()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
newSRAnalysis$plotPOD(results,critPoints)
newSRAnalysis$plotSimdata(linResults)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
#library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE)
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-AHatAnalysis$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
linResults<-newSRAnalysis$getLinearModel()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
keyAValues<-newSRAnalysis$getKeyAValues()
slope<-newSRAnalysis$getModelSlope()
intercept<-newSRAnalysis$getModelIntercept()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
newSRAnalysis$plotPOD(results,critPoints)
newSRAnalysis$plotSimdata(linResults)
View(testResults)
View(testResults)
View(linearModel_lm)
View(linearModel_lm)
sum(linearModel_lm$residuals)
sum(1,2,3,4,5)
View(linResults)
View(linResults)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
#library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE)
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-AHatAnalysis$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
linResults<-newSRAnalysis$getLinearModel()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
keyAValues<-newSRAnalysis$getKeyAValues()
slope<-newSRAnalysis$getModelSlope()
intercept<-newSRAnalysis$getModelIntercept()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
newSRAnalysis$plotPOD(results,critPoints)
newSRAnalysis$plotSimdata(linResults)
View(linResults)
View(linResults)
View(linearModel_lm)
View(linearModel_lm)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
#library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE)
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-AHatAnalysis$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
linResults<-newSRAnalysis$getLinearModel()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
keyAValues<-newSRAnalysis$getKeyAValues()
slope<-newSRAnalysis$getModelSlope()
intercept<-newSRAnalysis$getModelIntercept()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
resDF<-newSRAnalysis$getResidualTable()
newSRAnalysis$plotPOD(results,critPoints)
newSRAnalysis$plotSimdata(linResults)
View(resDF)
View(resDF)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
#library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE)
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-AHatAnalysis$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
linResults<-newSRAnalysis$getLinearModel()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
keyAValues<-newSRAnalysis$getKeyAValues()
slope<-newSRAnalysis$getModelSlope()
intercept<-newSRAnalysis$getModelIntercept()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
resDF<-newSRAnalysis$getResidualTable()
newSRAnalysis$plotPOD(results,critPoints)
newSRAnalysis$plotSimdata(linResults)
library(ggplot2) # gorgeous plots
library(gridExtra) # useful for plotting in grids
library(MASS) #contains boxcox and much more
#library(olsrr) #makes some nice plots to check assumptions
library(stats)
library(nlme) # contains gls = generalized least squares
library(pracma) #practical math...contains some functions from matlab
library(ggResidpanel)
library(carData)
library(car) # Need this for durbinWatsonTest
#library(tibble)
library(survival)
library(corrplot)
folderLocation=dirname(rstudioapi::getSourceEditorContext()$path)
source(paste(folderLocation, "/GenPODSignalResponeRObject.R", sep=""))
source(paste(folderLocation, "/SignalResponseMainAnalysisRObject.R", sep=""))
#data_obs = read.csv(paste(folderLocation,'/Plot_Data_50.csv',sep=""), header=TRUE, col.names=c("y","x"))
data_obs = read.csv(paste(folderLocation,"/dataFromPlots.csv",sep=""), header=TRUE)
data_obs=na.omit(data_obs)
#perform signal response analysis
newSRAnalysis<-AHatAnalysis$new(SignalRespDF=data_obs,y_dec=5)
newSRAnalysis$executeAhatvsA()
linResults<-newSRAnalysis$getLinearModel()
results<-newSRAnalysis$getResults()
critPoints<-newSRAnalysis$getCritPts()
keyAValues<-newSRAnalysis$getKeyAValues()
slope<-newSRAnalysis$getModelSlope()
intercept<-newSRAnalysis$getModelIntercept()
testResults<-newSRAnalysis$getLinearTestResults()
covarMatrix<-newSRAnalysis$getCovarianceMatrix()
resDF<-newSRAnalysis$getResidualTable()
newSRAnalysis$plotPOD(results,critPoints)
newSRAnalysis$plotSimdata(linResults)
View(linResults)
View(linResults)
