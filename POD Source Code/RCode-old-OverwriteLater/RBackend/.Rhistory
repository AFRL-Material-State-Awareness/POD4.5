library(knitr)
rating <- rating + 1
#test class 1
setClass("employee", slots=list(name="character", id="numeric", contact="character"))
newEmploy <- new("employee", name="Tom", id=12345, contact="YOLO")
print(newEmploy)
library(methods)
#test class 2
movies <- setRefClass("movies", fields = list(name = "character",
leadActor = "character", rating = "numeric"), methods = list(
increment_rating = function()
{
rating <- rating + 1
},
decrement_rating = function()
{
rating <- rating - 1
}
))
newMovie <- new("movies", name= "Avengers Endgame", leadActor = "some rich guy", rating=9.9)
newMovie$increment_rating()
newMovie$rating
#test class 1
setClass("employee", slots=list(name="character", id="numeric", contact="character"))
newEmploy <- new("employee", name="Tom", id=12345, contact="YOLO")
print(newEmploy)
library(methods)
#test class 2
movies <- setRefClass("movies", fields = list(name = "character",
leadActor = "character", rating = "numeric"), methods = list(
increment_rating = function()
{
rating <<- rating + 1
},
decrement_rating = function()
{
rating <<- rating - 1
}
))
newMovie <- new("movies", name= "Avengers Endgame", leadActor = "some rich guy", rating=9.9)
newMovie$increment_rating()
newMovie$rating
#test class 1
setClass("employee", slots=list(name="character", id="numeric", contact="character"))
newEmploy <- new("employee", name="Tom", id=12345, contact="YOLO")
print(newEmploy)
library(methods)
#test class 2
movies <- setRefClass("movies", fields = list(name = "character",
leadActor = "character", rating = "numeric"), methods = list(
increment_rating = function()
{
rating <<- rating + 1
},
decrement_rating = function()
{
rating <<- rating - 1
}
))
newMovie <- new("movies", name= "Avengers Endgame", leadActor = "some rich guy", rating=9.9)
newMovie$increment_rating()
newMovie$rating
library("RSSampling")
library(MASS)
#library(gdata)
library(pracma)
library(mcprofile) ## MLR and LR
library(glmnet)
library(logistf)
library("RSSampling")
library(MASS)
#library(gdata)
library(pracma)
library(Matrix)
library(mcprofile) ## MLR and LR
library(glmnet)
library(logistf)
detach("package:ggplot2", unload = TRUE)
detach("package:glmnet", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:Matrix", unload = TRUE)
detach("package:MASS", unload = TRUE)
detach("package:grDevices", unload = TRUE)
library(grDevices, lib.loc = "C:/Program Files/R/R-4.1.2/library")
install.packages("ggplot2")
library("RSSampling")
library(MASS)
#library(gdata)
library(pracma)
library(mcprofile) ## MLR and LR
library(glmnet)
library(logistf)
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
RVersion()
R.Version()
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
install.packages("tidyverse")
library(ggplot2)
library(tidyverse)
uninstall.R(r_version, GUI = TRUE)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
paage.install()
package.install()
library(tidyr)
install.packages("assetthat")
4.0.2.
setwd("C:/Users/gohmancm/Desktop/PODv4Point5FullProjectFolder/RCode/RBackend")
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", #inheritPackage = TRUE,
contains=getRefClass("mcprofile"),
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", #inheritPackage = TRUE,
contains=getRefClass("mcprofile", getNamespace("mcprofile")),
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", #inheritPackage = TRUE,
contains=getRefClass(getNamespace("mcprofile")),
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", #inheritPackage = TRUE,
contains=getNamespace("mcprofile"),
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
mcprofile
library(mcprofile)
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", #inheritPackage = TRUE,
contains=getNamespace("mcprofile", getNamespace("mcprofile")),
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", #inheritPackage = TRUE,
contains=getNamespace("mcprofile"),
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", #inheritPackage = TRUE,
contains=getRefClass("mcprofile", getNamespace("mcprofile")),
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
mcprofile<- getFromNamespace("mcprofile", "mcprofile")
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", #inheritPackage = TRUE,
contains="mcprofile",
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
mcprofile<- getFromNamespace("mcprofile", "mcprofile")
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", #inheritPackage = TRUE,
contains=mcprofile,
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
mcprofile<- getFromNamespace("mcprofile")
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
mcprofile<- getFromNamespace("Large mcprofile", "mcprofile")
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", #inheritPackage = TRUE,
contains=mcprofile,
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
mcprofile=setRefClass(mcprofile)
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
mcprofile=setRefClass('mcprofile')
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
#mcprofile=setRefClass('mcprofile')
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", inheritPackage = TRUE,
contains=mcprofile,
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
#this class is used to calculate the Likelihood ratio confidence interval of the POD curve (WARNING: SLOW)
#TODO: consider reimplmenting this in c++ in order to speed up to process
#mcprofile=setRefClass('mcprofile')
LikelihoodRatioConfInt <- setRefClass("LikelihoodRatioConfInt", inheritPackage = TRUE,
fields = list(LogisticRegressionResult="glm",
CIDataFrame="data.frame", calcLinearCombo="mcprofile"), methods = list(
#this class will pass back the confidence interval values as a dataframe
setCIDataFrame=function(psCIDataFrame){
CIDataFrame<<-psCIDataFrame
},
getCIDataFrame=function(){
return(CIDataFrame)
},
#set LinearComboValue
setLinCombo=function(psLinCombo){
calcLinearCombo<<-psLinCombo
},
executeLR=function(){
ci.logit.profile<-try(confint(object = calcLinearCombo, level = 0.95, adjust = "none",
alternative="greater", trace=TRUE,
parallel = "multicore",ncpus=4),TRUE)  # CI for beta_0 + beta_1 * x
if(is.numeric(ci.logit.profile$confint$lower)){
#print(ci.logit.profile)
profile.lr.int <- try(data.frame(
t_trans = LogisticRegressionResult$family$linkinv(ci.logit.profile$estimate$Estimate),
Confidence_Interval= LogisticRegressionResult$family$linkinv(ci.logit.profile$confint$lower)),TRUE)
#a9095_profile.lr = try(approx(profile.lr.int$lower,a_i_2,0.9)$y,TRUE)
#if(!is.numeric(a9095_profile.lr)){a9095_profile.lr=NA}
}#else{a9095_profile.lr=NA}
setCIDataFrame(profile.lr.int)
}
))
